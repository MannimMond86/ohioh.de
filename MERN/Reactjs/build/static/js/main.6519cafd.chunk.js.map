{"version":3,"sources":["Form.js","NForm.js","App.js","serviceWorker.js","index.js"],"names":["formStyle","padding","inputStyle","margin","Form","db","useState","firstname","lastname","names","setNames","useEffect","version","stores","formData","transaction","a","get","dbFirstname","dbLastname","add","id","value","catch","e","console","log","stack","close","setName","put","prevNames","handleSetName","target","style","onSubmit","preventDefault","type","name","onChange","NForm","state","age","address","handleSubmit","event","user","axios","post","then","res","data","handleChange","idAttr","srcElement","currentTarget","attributes","nodeValue","setState","this","htmlFor","React","Component","App","open","setOpen","width","onClick","Dexie","Boolean","window","location","hostname","match","IndexedDB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.6519cafd.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { Offline, Online } from 'react-detect-offline'\r\n\r\n// some inline styling so everything isn't squished\r\nconst formStyle = { padding: '2rem 0rem' }\r\nconst inputStyle = { margin: '1rem 0rem' }\r\n\r\n// a simple form with a first name, last name, and submit button\r\nconst Form = ({ db }) => {\r\n  // store form values in a state hook\r\n  const [names, setNames] = useState({ firstname: '', lastname: '' })\r\n\r\n  // set firstname and lastname to whatever is in the database\r\n  // if no values are in the database, set the database values to ''\r\n  useEffect(\r\n    () => {\r\n      // create the store\r\n      db.version(1).stores({ formData: 'id,value' })\r\n\r\n      // perform a read/write transatiction on the new store\r\n      db.transaction('rw', db.formData, async () => {\r\n        // get the first and last name from the data\r\n        const dbFirstname = await db.formData.get('firstname')\r\n        const dbLastname = await db.formData.get('lastname')\r\n\r\n        // if the first or last name fields have not be added, add them\r\n        if (!dbFirstname) await db.formData.add({ id: 'firstname', value: '' })\r\n        if (!dbLastname) await db.formData.add({ id: 'lastname', value: '' })\r\n\r\n        // set the initial values\r\n        setNames({\r\n          firstname: dbFirstname ? dbFirstname.value : '',\r\n          lastname: dbLastname ? dbLastname.value : ''\r\n        })\r\n      }).catch(e => {\r\n        // log any errors\r\n        console.log(e.stack || e)\r\n      })\r\n\r\n      // close the database connection if form is unmounted or the\r\n      // database connection changes\r\n      return () => db.close()\r\n    },\r\n    // run effect whenever the database connection changes\r\n    [db]\r\n  )\r\n\r\n  // sets the name in the store and in the state hook\r\n  const setName = id => value => {\r\n    // update the store\r\n    db.formData.put({ id, value })\r\n    // update the state hook\r\n    setNames(prevNames => ({ ...prevNames, [id]: value }))\r\n  }\r\n\r\n  // partial application to make on change handler easier to deal with\r\n  const handleSetName = id => e => setName(id)(e.target.value)\r\n\r\n  // when the form is submitted, prevent the default action\r\n  // which reloads the page and reset the first and last name\r\n  // in both the store and in the state hook\r\n  const handleSubmit = e => {\r\n    e.preventDefault()\r\n    setName('firstname')('')\r\n    setName('lastname')('')\r\n  }\r\n\r\n  return (\r\n    <form style={formStyle} onSubmit={handleSubmit}>\r\n      <span>First name:</span>\r\n      <br />\r\n      <input\r\n        style={inputStyle}\r\n        type=\"text\"\r\n        name=\"firstname\"\r\n        value={names.firstname}\r\n        onChange={handleSetName('firstname')}\r\n      />\r\n      <br />\r\n      <span>Last name:</span>\r\n      <br />\r\n      <input\r\n        style={inputStyle}\r\n        type=\"text\"\r\n        name=\"lastname\"\r\n        value={names.lastname}\r\n        onChange={handleSetName('lastname')}\r\n      />\r\n      <br />\r\n      {/* Handle whether or not the user is offline */}\r\n      <Online>\r\n        <input type=\"submit\" value=\"Submit\" />\r\n      </Online>\r\n      <Offline>You are currently offline!</Offline>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default Form","\r\nimport React from 'react'\r\nimport { Offline, Online } from 'react-detect-offline'\r\n\r\nimport axios from \"axios\"; \r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nclass NForm extends React.Component {\r\n \r\n  \r\n    state = {\r\n      name: '',\r\n      age : '',\r\n      address : ''\r\n    };\r\n  /* This is where the magic happens \r\n  */\r\n  handleSubmit = event => {\r\n      event.preventDefault();\r\n      const user = {\r\n        name: this.state.name,\r\n        age : this.state.age,\r\n        address : this.state.address\r\n      }\r\n      axios.post('http://localhost:4000/items', { user })\r\n        .then(res=>{\r\n          console.log(res);\r\n          console.log(res.data);\r\n           //This line of code will redirect you once the submission is succeed\r\n        })\r\n    }\r\n  handleChange = event =>{\r\n    console.log(\"on change\");\r\n      \r\n      var target = event.target || event.srcElement || event.currentTarget;\r\n    var idAttr = target.attributes.id;\r\n    console.log(idAttr);\r\n    var value = idAttr.nodeValue;\r\n    console.log(value);\r\n    if (value == \"name\") {\r\n      this.setState({ name: event.target.value});\r\n    } \r\n    else if(value == \"age\") {\r\n      this.setState({ age: event.target.value});\r\n    }\r\n    else\r\n    {\r\n      this.setState({ address: event.target.value});\r\n\r\n    }\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div>\r\n        \r\n        <form onSubmit={this.handleSubmit}>\r\n          <label htmlFor=\"name\">Enter username</label>\r\n          <input id=\"name\" name=\"name\" type=\"text\" onChange= {this.handleChange}/>\r\n  \r\n          <label htmlFor=\"age\">Enter your age</label>\r\n          <input id=\"age\" name=\"age\" type=\"text\" onChange= {this.handleChange} />\r\n  \r\n          <label htmlFor=\"address\">Enter your address</label>\r\n          <input id=\"address\" name=\"address\" type=\"text\" onChange= {this.handleChange} />\r\n  \r\n          <button>Send data!</button>\r\n        </form>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  export default NForm","import React, { useEffect, useState } from 'react';\nimport Dexie from 'dexie';\n\nimport Form from './Form';\nimport NForm from './NForm';\n\nconst  App = () => {\n\n\n  \n  \n  const [open, setOpen] = useState(true)\n\n\n\n \n\n\nreturn (\n    <div style={{ margin: '2rem auto', width: '200px' }}>\n      <button onClick={() => setOpen(!open)}>{`${\n        open ? 'Close' : 'Open'\n      } Form`}</button>\n      {/* Pass in a new connection to the database when Form is first rendered */}\n      {open && <Form db={new Dexie('FormDatabase')} />}\n      <NForm/>\n\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\nif(window.IndexedDB){\n  console.log('IndexedDB is supported');\n}\nelse\n{\n  console.log('IndexedDB is not supported');\n}\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}